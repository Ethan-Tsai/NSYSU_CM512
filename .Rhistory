# rmarkdown::find_pandoc(version = '2.7.3')
if(!require(pacman))
if(!require(dplyr))
if(!require(tidyr))
if(!require(ggplot2))
if(!require(plotly))
# Chunk 2
pacman::p_load(dplyr,tidyr,ggplot2,plotly,gridExtra)
theme_set(theme_get() + theme(# set common plotting formats
text=element_text(size=8), legend.key.size=unit(10,"points")
))
# Chunk 3
head(iris)
table(iris$Species)
# Chunk 4
ggplot(iris, aes(x=Sepal.Width, y=Sepal.Length, color=Species)) +
geom_point(size=2, shape=18) + theme_bw()
# Chunk 5
getwd()
D = read.csv("./material/5/unit05_ggplot/data/comics1.csv",stringsAsFactors=F)
glimpse(D)
# Chunk 6
ggplot(D, aes(year,appearances)) + geom_point()
# Chunk 7
# take 100 most appearing characters from each publisher
gg = D %>% group_by(publisher) %>%     # from each publisher
top_n(n=100, wt=appearances) %>%     # pick out 100 most appearing roles
ggplot(aes(x=year,y=appearances,color=sex,shape=align, label=name)) +
scale_y_log10() +
facet_wrap(~publisher) +
geom_point(alpha=0.8) +              # set transparency & size
theme_bw() +                         # choose a theme for clarity
theme(text=element_text(size=9)) +   # use smaller font
labs(title="The Most Appearings",
x="", y="", color="", shape="") #  set plot and the axis titles
# Chunk 8
ggplotly(gg)
library(ggplot2)
library(plotly)
ggplotly(gg)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
ggplotly(gg)
library(plotly)
ggplotly(gg)
sessionInfo()
install.packages(c("asbio", "askpass", "brio", "broom", "BSDA", "bslib", "cachem", "callr", "cli", "colorspace", "cowplot", "cpp11", "data.table", "DBI", "dbplyr", "desc", "deSolve", "digest", "dplyr", "e1071", "EnvStats", "evaluate", "fansi", "fastmap", "fontawesome", "fs", "gapminder", "gargle", "ggrepel", "ggsci", "glue", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "httr", "isoband", "jsonlite", "knitr", "labeling", "lifecycle", "lme4", "lubridate", "MASS", "Matrix", "MatrixModels", "minqa", "multcompView", "mvtnorm", "openssl", "pbkrtest", "pkgbuild", "pkgload", "plotrix", "prettyunits", "processx", "progress", "ps", "purrr", "quantreg", "ragg", "Rcpp", "RcppEigen", "readr", "readxl", "rematch", "remotes", "reprex", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "rvest", "sass", "scatterplot3d", "stringi", "stringr", "sys", "systemfonts", "testthat", "textshaping", "tidyr", "tidyselect", "timechange", "tinytex", "tzdb", "utf8", "uuid", "vctrs", "viridisLite", "vroom", "waldo", "withr", "xfun", "xml2", "yaml"))
install.packages(c("asbio", "askpass", "brio", "broom", "BSDA", "bslib", "cachem", "callr", "cli", "colorspace", "cowplot", "cpp11", "data.table", "DBI", "dbplyr", "desc", "deSolve", "digest", "dplyr", "e1071", "EnvStats", "evaluate", "fansi", "fastmap", "fontawesome", "fs", "gapminder", "gargle", "ggrepel", "ggsci", "glue", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "httr", "isoband", "jsonlite", "knitr", "labeling", "lifecycle", "lme4", "lubridate", "MASS", "Matrix", "MatrixModels", "minqa", "multcompView", "mvtnorm", "openssl", "pbkrtest", "pkgbuild", "pkgload", "plotrix", "prettyunits", "processx", "progress", "ps", "purrr", "quantreg", "ragg", "Rcpp", "RcppEigen", "readr", "readxl", "rematch", "remotes", "reprex", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "rvest", "sass", "scatterplot3d", "stringi", "stringr", "sys", "systemfonts", "testthat", "textshaping", "tidyr", "tidyselect", "timechange", "tinytex", "tzdb", "utf8", "uuid", "vctrs", "viridisLite", "vroom", "waldo", "withr", "xfun", "xml2", "yaml"))
install.packages(c("asbio", "askpass", "brio", "broom", "BSDA", "bslib", "cachem", "callr", "cli", "colorspace", "cowplot", "cpp11", "data.table", "DBI", "dbplyr", "desc", "deSolve", "digest", "dplyr", "e1071", "EnvStats", "evaluate", "fansi", "fastmap", "fontawesome", "fs", "gapminder", "gargle", "ggrepel", "ggsci", "glue", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "httr", "isoband", "jsonlite", "knitr", "labeling", "lifecycle", "lme4", "lubridate", "MASS", "Matrix", "MatrixModels", "minqa", "multcompView", "mvtnorm", "openssl", "pbkrtest", "pkgbuild", "pkgload", "plotrix", "prettyunits", "processx", "progress", "ps", "purrr", "quantreg", "ragg", "Rcpp", "RcppEigen", "readr", "readxl", "rematch", "remotes", "reprex", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "rvest", "sass", "scatterplot3d", "stringi", "stringr", "sys", "systemfonts", "testthat", "textshaping", "tidyr", "tidyselect", "timechange", "tinytex", "tzdb", "utf8", "uuid", "vctrs", "viridisLite", "vroom", "waldo", "withr", "xfun", "xml2", "yaml"))
install.packages(c("asbio", "askpass", "brio", "broom", "BSDA", "bslib", "cachem", "callr", "cli", "colorspace", "cowplot", "cpp11", "data.table", "DBI", "dbplyr", "desc", "deSolve", "digest", "dplyr", "e1071", "EnvStats", "evaluate", "fansi", "fastmap", "fontawesome", "fs", "gapminder", "gargle", "ggrepel", "ggsci", "glue", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "httr", "isoband", "jsonlite", "knitr", "labeling", "lifecycle", "lme4", "lubridate", "MASS", "Matrix", "MatrixModels", "minqa", "multcompView", "mvtnorm", "openssl", "pbkrtest", "pkgbuild", "pkgload", "plotrix", "prettyunits", "processx", "progress", "ps", "purrr", "quantreg", "ragg", "Rcpp", "RcppEigen", "readr", "readxl", "rematch", "remotes", "reprex", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "rvest", "sass", "scatterplot3d", "stringi", "stringr", "sys", "systemfonts", "testthat", "textshaping", "tidyr", "tidyselect", "timechange", "tinytex", "tzdb", "utf8", "uuid", "vctrs", "viridisLite", "vroom", "waldo", "withr", "xfun", "xml2", "yaml"))
sessionInfo()
library(ggplot2)
library(plotly)
ggplotly(gg)
sessionInfo()
sessionInfo()
# Chunk 2
pacman::p_load(dplyr,tidyr,ggplot2,plotly,gridExtra)
# Chunk 3
head(iris)
table(iris$Species)
# Chunk 4
ggplot(iris, aes(x=Sepal.Width, y=Sepal.Length, color=Species)) +
geom_point(size=2, shape=18) + theme_bw()
# Chunk 5
D = read.csv("data/comics1.csv",stringsAsFactors=F)
D = read.csv("material/data/comics1.csv",stringsAsFactors=F)
D = read.csv("material/5/data/comics1.csv",stringsAsFactors=F)
glimpse(D)
D = read.csv("material/5/data/comics1.csv",stringsAsFactors=F)
glimpse(D)
先畫一個簡單的點狀圖
圖看起來很漂亮，但能看到什麼資訊呢？你能說出誰是出場次數最多的角色嗎？讓我們來做一些改善。<br><br>
ggplot(D, aes(year,appearances)) + geom_point()
# Chunk 6
ggplot(D, aes(year,appearances)) + geom_point()
# Chunk 7
# take 100 most appearing characters from each publisher
gg = D %>% group_by(publisher) %>%     # from each publisher
top_n(n=100, wt=appearances) %>%     # pick out 100 most appearing roles
ggplot(aes(x=year,y=appearances,color=sex,shape=align, label=name)) +
scale_y_log10() +
facet_wrap(~publisher) +
geom_point(alpha=0.8) +              # set transparency & size
theme_bw() +                         # choose a theme for clarity
theme(text=element_text(size=9)) +   # use smaller font
labs(title="The Most Appearings",
x="", y="", color="", shape="") #  set plot and the axis titles
# Chunk 8
ggplotly(gg)
# Chunk 9
breaks=seq(1980,2010,5)
D2 = filter(D, year>=1980, year<=2010) %>%       # set the time period
mutate(
period = cut(year,breaks,breaks[-1],T) %>%   # cut them into 5yr period
as.character %>%  # by default cut() returns a factor, but
as.integer        # we'd liker to have an integer here
)
# Chunk 10
outlooks = count(D2, hair, eye, sort=T) %>%      # count and sort
mutate(share=100*n/sum(n), cum=cumsum(share))  # shares and accumulation
head(outlooks, 20)
# Chunk 11
inner_join(D2, outlooks[1:10,]) %>%    # filter for the top 10 outlooks
group_by(hair, eye) %>% summarise(   # group by hair and eye
n = n(),                           # count the no. characters
female=mean(sex=="Female"),        # the share of female
bad=mean(align=="Bad"),            # the share of bad guys
dead=mean(alive=="Deceased"),      # the casualty ratio
.groups='drop') %>%                # drop the remaining group
ggplot(aes(bad, dead)) +             # map x and y coordinates
geom_point(aes(col=female, size=n), alpha=0.8) +   # map size and color
scale_color_gradientn(colors=c("seagreen","gold","red")) +  # set color scale
scale_size_continuous(range=c(3,12)) +             # set size scale
geom_text(aes(label=paste(hair,eye,sep="\n")), size=3) # put on a text label
# Chunk 12
gg = inner_join(D2, outlooks[1:18,-3]) %>%
group_by(period, hair, eye) %>% summarise(
n = n(), bad=mean(align=="Bad"), female=mean(sex=="Female"),
dead=mean(alive=="Deceased"), .groups='drop') %>%
mutate(hair.eye = paste(hair,eye,sep=".")) %>%
ggplot(aes(bad, dead, label=hair.eye)) +
scale_color_gradientn(colors=c("seagreen","gold","red")) +
scale_size_continuous(range=c(2,12)) +
geom_point(aes(col=female, size=n, frame=period), alpha=0.8)
ggplotly(gg) %>% animation_opts(100)
# Chunk 3
head(iris)
table(iris$Species)
# Chunk 4
ggplot(iris, aes(x=Sepal.Width, y=Sepal.Length, color=Species)) +
geom_point(size=2, shape=18) + theme_bw()
# Chunk 5
D = read.csv("material/5/data/comics1.csv",stringsAsFactors=F)
glimpse(D)
# Chunk 6
ggplot(D, aes(year,appearances)) + geom_point()
# Chunk 7
# take 100 most appearing characters from each publisher
gg = D %>% group_by(publisher) %>%     # from each publisher
top_n(n=100, wt=appearances) %>%     # pick out 100 most appearing roles
ggplot(aes(x=year,y=appearances,color=sex,shape=align, label=name)) +
scale_y_log10() +
facet_wrap(~publisher) +
geom_point(alpha=0.8) +              # set transparency & size
theme_bw() +                         # choose a theme for clarity
theme(text=element_text(size=9)) +   # use smaller font
labs(title="The Most Appearings",
x="", y="", color="", shape="") #  set plot and the axis titles
# Chunk 8
ggplotly(gg)
# Chunk 9
breaks=seq(1980,2010,5)
D2 = filter(D, year>=1980, year<=2010) %>%       # set the time period
mutate(
period = cut(year,breaks,breaks[-1],T) %>%   # cut them into 5yr period
as.character %>%  # by default cut() returns a factor, but
as.integer        # we'd liker to have an integer here
)
# Chunk 10
outlooks = count(D2, hair, eye, sort=T) %>%      # count and sort
mutate(share=100*n/sum(n), cum=cumsum(share))  # shares and accumulation
head(outlooks, 20)
# Chunk 11
inner_join(D2, outlooks[1:10,]) %>%    # filter for the top 10 outlooks
group_by(hair, eye) %>% summarise(   # group by hair and eye
n = n(),                           # count the no. characters
female=mean(sex=="Female"),        # the share of female
bad=mean(align=="Bad"),            # the share of bad guys
dead=mean(alive=="Deceased"),      # the casualty ratio
.groups='drop') %>%                # drop the remaining group
ggplot(aes(bad, dead)) +             # map x and y coordinates
geom_point(aes(col=female, size=n), alpha=0.8) +   # map size and color
scale_color_gradientn(colors=c("seagreen","gold","red")) +  # set color scale
scale_size_continuous(range=c(3,12)) +             # set size scale
geom_text(aes(label=paste(hair,eye,sep="\n")), size=3) # put on a text label
# Chunk 12
gg = inner_join(D2, outlooks[1:18,-3]) %>%
group_by(period, hair, eye) %>% summarise(
n = n(), bad=mean(align=="Bad"), female=mean(sex=="Female"),
dead=mean(alive=="Deceased"), .groups='drop') %>%
mutate(hair.eye = paste(hair,eye,sep=".")) %>%
ggplot(aes(bad, dead, label=hair.eye)) +
scale_color_gradientn(colors=c("seagreen","gold","red")) +
scale_size_continuous(range=c(2,12)) +
geom_point(aes(col=female, size=n, frame=period), alpha=0.8)
ggplotly(gg) %>% animation_opts(100)
ggplot(D, aes(year,appearances,color=sex, shape=align)) + geom_point()
ggplot(D, aes(year,appearances,color=sex, shape=align)) + geom_point+ scale_y_log10()
ggplot(D, aes(year,appearances,color=sex, shape=align)) + geom_point+scale_y_log10()
ggplot(D, aes(year,appearances,color=sex, shape=align)) + geom_point+scale_y_log10()
ggplot(D, aes(year,appearances,color=sex, shape=align)) + geom_point()
ggplot(D, aes(year,appearances,color=sex, shape=align)) + geom_point() + scale_y_log10()
ggplot(D, aes(year,appearances,color=sex, shape=align)) + geom_point() + scale_y_log10()+ facet_wrap(~publisher)
ggplotly(gg)
# Chunk 1
# 安裝、設定和格式化，不要修改此程式區塊。
rm(list=ls(all=T))
knitr::opts_chunk$set(comment = NA)
knitr::opts_knit$set(global.par = TRUE)
par(cex=0.7)
options(scipen=20, digits=4, width=80, tibble.print_min=3)
# rmarkdown::find_pandoc(version = '2.7.3')
if(!require(pacman)) install.packages("pacman")
if(!require(dplyr)) install.packages("dplyr")
if(!require(tidyr)) install.packages("tidyr")
if(!require(ggplot2)) install.packages("ggplot2")
if(!require(plotly)) install.packages("plotly")
# Chunk 2
pacman::p_load(dplyr,tidyr,ggplot2,plotly,gridExtra)
# Chunk 3
head(iris)
table(iris$Species)
# Chunk 4
ggplot(iris, aes(x=Sepal.Width, y=Sepal.Length, color=Species)) +
geom_point(size=2, shape=18) + theme_bw()
# Chunk 5
D = read.csv("material/5/data/comics1.csv",stringsAsFactors=F)
glimpse(D)
# Chunk 6
ggplot(D, aes(year,appearances)) + geom_point()
# Chunk 7
ggplot(D, aes(year,appearances,color=sex, shape=align)) + geom_point() + scale_y_log10()+ facet_wrap(~publisher)
# Chunk 8
# take 100 most appearing characters from each publisher
gg = D %>% group_by(publisher) %>%     # from each publisher
top_n(n=100, wt=appearances) %>%     # pick out 100 most appearing roles
ggplot(aes(x=year,y=appearances,color=sex,shape=align, label=name)) +
scale_y_log10() +
facet_wrap(~publisher) +
geom_point(alpha=0.8) +              # set transparency & size
theme_bw() +                         # choose a theme for clarity
theme(text=element_text(size=9)) +   # use smaller font
labs(title="The Most Appearings",
x="", y="", color="", shape="") #  set plot and the axis titles
# Chunk 9
ggplotly(gg)
# Chunk 10
breaks=seq(1980,2010,5)
D2 = filter(D, year>=1980, year<=2010) %>%       # set the time period
mutate(
period = cut(year,breaks,breaks[-1],T) %>%   # cut them into 5yr period
as.character %>%  # by default cut() returns a factor, but
as.integer        # we'd liker to have an integer here
)
# Chunk 11
outlooks = count(D2, hair, eye, sort=T) %>%      # count and sort
mutate(share=100*n/sum(n), cum=cumsum(share))  # shares and accumulation
head(outlooks, 20)
# Chunk 12
inner_join(D2, outlooks[1:10,]) %>%    # filter for the top 10 outlooks
group_by(hair, eye) %>% summarise(   # group by hair and eye
n = n(),                           # count the no. characters
female=mean(sex=="Female"),        # the share of female
bad=mean(align=="Bad"),            # the share of bad guys
dead=mean(alive=="Deceased"),      # the casualty ratio
.groups='drop') %>%                # drop the remaining group
ggplot(aes(bad, dead)) +             # map x and y coordinates
geom_point(aes(col=female, size=n), alpha=0.8) +   # map size and color
scale_color_gradientn(colors=c("seagreen","gold","red")) +  # set color scale
scale_size_continuous(range=c(3,12)) +             # set size scale
geom_text(aes(label=paste(hair,eye,sep="\n")), size=3) # put on a text label
# Chunk 13
gg = inner_join(D2, outlooks[1:18,-3]) %>%
group_by(period, hair, eye) %>% summarise(
n = n(), bad=mean(align=="Bad"), female=mean(sex=="Female"),
dead=mean(alive=="Deceased"), .groups='drop') %>%
mutate(hair.eye = paste(hair,eye,sep=".")) %>%
ggplot(aes(bad, dead, label=hair.eye)) +
scale_color_gradientn(colors=c("seagreen","gold","red")) +
scale_size_continuous(range=c(2,12)) +
geom_point(aes(col=female, size=n, frame=period), alpha=0.8)
ggplotly(gg) %>% animation_opts(100)
unlink("material/5/unit05B_geom_bar_cache", recursive = TRUE)
unlink("material/5/unit05A_geom_point_cache", recursive = TRUE)
group_by(D, sex) %>%
summarise( casualty.ratio = mean(alive=="Deceased") ) %>%
ggplot(aes(x=sex, y=casualty.ratio)) + geom_col()
# Installation, setup & formatting. Do not modify this code chunk.
rm(list=ls(all=T))
knitr::opts_chunk$set(comment = NA)
knitr::opts_knit$set(global.par = TRUE)
options(scipen=20, digits=4, width=80, tibble.print_min=4)
# rmarkdown::find_pandoc(version = '2.7.3')
pacman::p_load(dplyr,ggplot2,plotly,gridExtra)
theme_set(theme_get() + theme(
text=element_text(size=8), legend.key.size=unit(10,"points")
))
D = read.csv("data/comics1.csv",stringsAsFactors=F) %>% as_tibble
glimpse(D)
g1 = ggplot(D, aes(x=year)) + geom_histogram(binwidth=10)
g2 = ggplot(D, aes(x=align)) + geom_bar()
g3 = group_by(D, sex) %>%
summarise( casualty.ratio = mean(alive=="Deceased") ) %>%
ggplot(aes(x=sex, y=casualty.ratio)) + geom_col()
grid.arrange(g1,g2,g3,nrow=1)  # align three plots in a row
g1 = ggplot(D, aes(x=year, fill=publisher)) + geom_histogram(binwidth=10)
g2 = ggplot(D, aes(x=align, fill=sex)) + geom_bar()
grid.arrange(g1,g2,nrow=1)  # align three plots in a row
group_by(D, sex) %>%
summarise( casualty.ratio = mean(alive=="Deceased") ) %>%
ggplot(aes(x=sex, y=casualty.ratio)) + geom_col()
group_by(D, sex, align) %>%
summarise(casualty=mean(alive=="Deceased"), .groups="drop") %>%
ggplot(aes(x=sex, y=casualty, fill=align)) + geom_col()
table(D$align, D$sex)
count(D, align, sex)
dx = count(D, align, sex)
gg = lapply(c("stack","dodge","fill"), function(pos) {
ggplot(dx, aes(sex,n,fill=align)) +
geom_col(position=pos, alpha=0.6) + labs(title=pos,y="")
})
grid.arrange(grobs=gg, nrow=1)
# gg = lapply(c("stack","dodge","fill"), function(pos) {
#   ggplot(dx, aes(sex,n,fill=align)) +
#     geom_col(position=pos, alpha=0.6) + labs(title=pos,y="")
#   })
# grid.arrange(grobs=gg, nrow=1)
gg = lapply(c("stack","dodge","fill"), function(pos) {
ggplot(dx, aes(align,n,fill=sex)) +
geom_col(position=pos, alpha=0.6) + labs(title=pos,y="")
})
grid.arrange(grobs=gg, nrow=1)
D = mutate(D, decade = (D$year -1900) %/% 10)
table(D$decade)
ggplot(D, aes(x=decade, fill=align)) +
geom_bar() + facet_grid(sex~publisher)
# here we convert `align` into a factor so we can
# re-order the align levels in a desirable way
D2 = D %>% mutate(
align=factor(align,levels=c("Bad","Neutral","Good"))
) %>%
filter(decade >= 6)
ggplot(D2, aes(x=decade, fill=align)) +
geom_bar(position="fill") +
facet_grid(sex~publisher)
hx = count(D2, hair, sort=T)
ex = count(D2, eye, sort=T)
D2 %>% filter(
hair%in%hx$hair[1:3], eye%in%ex$eye[1:3],
align!="Neutral") %>%
ggplot(aes(decade,fill=align)) +
geom_bar(position="fill",alpha=0.7) +
labs(x="eye",y="hair") +
facet_grid(hair~eye)
group_by(D, sex) %>%
summarise( casualty.ratio = mean(alive=="Deceased") ) %>%
ggplot(aes(x=sex, y=casualty.ratio),fill=align) + geom_col()
group_by(D, sex) %>%
summarise( casualty.ratio = mean(alive=="Deceased") ) %>%
ggplot(aes(x=sex, y=casualty.ratio,fill=align)) + geom_col()
group_by(D, sex) %>%
summarise( casualty.ratio = mean(alive=="Deceased") ) %>%
ggplot(aes(x=sex, y=casualty.ratio)) + geom_col()
group_by(D, sex,align) %>%
summarise( casualty.ratio = mean(alive=="Deceased") ) %>%
ggplot(aes(x=sex, y=casualty.ratio)) + geom_col()
group_by(D, sex, align) %>%
summarise(casualty.ratio = mean(alive == "Deceased"), .groups = "drop") %>%
ggplot(aes(x = sex, y = casualty.ratio)) +
geom_col()
group_by(D, sex, align) %>%
summarise(casualty.ratio = mean(alive == "Deceased"), .groups = "drop") %>%
ggplot(aes(x = sex, y = casualty.ratio, fill=align)) +
geom_col()
gg = lapply(c("stack","dodge","fill"), function(pos) {
ggplot(dx, aes(sex,n,fill=align)) +
geom_col(position=pos, alpha=0.6) + labs(title=pos,y="")
})
grid.arrange(grobs=gg, nrow=1)
gg = lapply(c("stack","dodge","fill"), function(pos) {
ggplot(dx, aes(align,n,fill=sex)) +
geom_col(position=pos, alpha=0.6) + labs(title=pos,y="")
})
grid.arrange(grobs=gg, nrow=1)
hx = count(D2, hair, sort=T)
ex = count(D2, eye, sort=T)
D2 %>% filter(
hair%in%hx$hair[1:3], eye%in%ex$eye[1:3],
align!="Neutral") %>%
ggplot(aes(decade,fill=align)) +
geom_bar(position="stack",alpha=0.7) +
labs(x="eye",y="hair") +
facet_grid(hair~eye)
hx = count(D2, hair, sort=T)
ex = count(D2, eye, sort=T)
D2 %>% filter(
hair%in%hx$hair[1:3], eye%in%ex$eye[1:3],
align!="Neutral") %>%
ggplot(aes(decade,fill=align)) +
geom_bar(position="dodge",alpha=0.7) +
labs(x="eye",y="hair") +
facet_grid(hair~eye)
hx = count(D2, hair, sort=T)
ex = count(D2, eye, sort=T)
D2 %>% filter(
hair%in%hx$hair[1:3], eye%in%ex$eye[1:3],
align!="Neutral") %>%
ggplot(aes(decade,fill=align)) +
geom_bar(position="stack",alpha=0.7) +
labs(x="eye",y="hair") +
facet_grid(hair~eye)
D = read.csv("material/5/data/comics1.csv",stringsAsFactors=F) %>% as_tibble
D = read.csv("./material/5/data/comics1.csv",stringsAsFactors=F) %>% as_tibble
setwd()
setwd()
setwd()
getwd()
D = read.csv("./data/comics1.csv",stringsAsFactors=F) %>% as_tibble
# Chunk 2
pacman::p_load(dplyr,tidyr,ggplot2,plotly,gridExtra)
theme_set(theme_get() + theme(
text=element_text(size=8), legend.key.size=unit(10,"points")
))
D = read.csv("data/comics1.csv",stringsAsFactors=F) %>% as_tibble
D = read.csv("./data/comics1.csv",stringsAsFactors=F) %>% as_tibble
getwd()
D = read.csv("material/5/data/comics1.csv",stringsAsFactors=F) %>% as_tibble
D = read.csv("material/5/data/comics1.csv",stringsAsFactors=F) %>% as_tibble
# Chunk 3
count(D, year) %>%                    # 計算每年新角色的數量
ggplot(aes(year, n)) + geom_line()  # 並繪製一個折線圖
# Chunk 4
count(D, year, publisher) %>%
ggplot(aes(year, n, col=publisher)) +
geom_line(size=1)
# Chunk 5
breaks=seq(1980,2010,5)
D2 = filter(D, year>=1980, year<=2010) %>%
mutate(period = cut(year,breaks,breaks[-1],T) %>%
as.character %>% as.integer)
table(D2$period, useNA='ifany')
# Chunk 6
ggplot(D2, aes(period, fill=publisher)) +
geom_bar(position='dodge')
# Chunk 7
count(D2, period, align) %>%
group_by(period) %>%
mutate(rate = n/sum(n)) %>%
ggplot(aes(period, rate)) +
geom_line(aes(col=align))
# Chunk 8
count(D2, period, publisher, align) %>%  # 以類別型變數計算個數
group_by(period, publisher) %>%        # 根據period和publisher來對資料進行分組
mutate(rate = n/sum(n)) %>%            # 新增一個欄位rate並將計算的個數轉換為比率
ggplot(aes(period, rate)) +
facet_grid(~publisher) +               # 每一個窗格畫一個出版商
geom_line(aes(col=align), size=1) +    # 使線條更粗
geom_point()                           # 增加圓點使其看起來更好
# Chunk 9
# count(D2, period, publisher, align) %>%  # 以類別型變數計算個數
#   group_by(period, publisher) %>%        # 根據period和publisher來對資料進行分組
#   mutate(rate = n/sum(n)) %>%            # 新增一個欄位rate並將計算的個數轉換為比率
#   ggplot(aes(period, rate)) +
#   facet_grid(~publisher) +               # 每一個窗格畫一個出版商
#   geom_line(aes(col=align), size=1) +    # 使線條更粗
#   geom_point()                           # 增加圓點使其看起來更好
# Chunk 10
count(D2, period, publisher, sex, align) %>%
group_by(period, publisher, sex) %>%
mutate(rate = n/sum(n)) %>%
ggplot(aes(period, rate)) +
facet_grid(sex~publisher) +
geom_line(aes(col=align), size=1) +
geom_point()
count(D2, period, publisher, sex, align) %>%
group_by(period, publisher, sex) %>%
mutate(rate = n/sum(n)) %>%
ggplot(aes(period, rate)) +
facet_grid(sex~publisher) +
geom_line(aes(col=align), size=1) +
geom_point()
count(D2, period, publisher, align) %>%  # 以類別型變數計算個數
group_by(period, publisher) %>%        # 根據period和publisher來對資料進行分組
mutate(rate = n/sum(n)) %>%            # 新增一個欄位rate並將計算的個數轉換為比率
ggplot(aes(period, rate)) +
facet_grid(~publisher) +               # 每一個窗格畫一個出版商
geom_line(aes(col=align), size=1) +    # 使線條更粗
geom_point()                           # 增加圓點使其看起來更好
count(D2, period, publisher, align) %>%  # 以類別型變數計算個數
group_by(period, publisher,sex) %>%        # 根據period和publisher來對資料進行分組
mutate(rate = n/sum(n)) %>%            # 新增一個欄位rate並將計算的個數轉換為比率
ggplot(aes(period, rate)) +
facet_grid(~publisher) +               # 每一個窗格畫一個出版商
geom_line(aes(col=align), size=1) +    # 使線條更粗
geom_point()                           # 增加圓點使其看起來更好
count(D2, period, publisher, align,sex) %>%  # 以類別型變數計算個數
group_by(period, publisher,sex) %>%        # 根據period和publisher來對資料進行分組
mutate(rate = n/sum(n)) %>%            # 新增一個欄位rate並將計算的個數轉換為比率
ggplot(aes(period, rate)) +
facet_grid(~publisher) +               # 每一個窗格畫一個出版商
geom_line(aes(col=align), size=1) +    # 使線條更粗
geom_point()                           # 增加圓點使其看起來更好
count(D2, period, publisher, align,sex) %>%  # 以類別型變數計算個數
group_by(period, publisher,sex) %>%        # 根據period和publisher來對資料進行分組
mutate(rate = n/sum(n)) %>%            # 新增一個欄位rate並將計算的個數轉換為比率
ggplot(aes(period, rate)) +
facet_grid(sex~publisher) +               # 每一個窗格畫一個出版商&新加的SEX
geom_line(aes(col=align), size=1) +    # 使線條更粗
geom_point()                           # 增加圓點使其看起來更好
count(D2, period, publisher, sex, align) %>%
group_by(period, publisher, sex) %>%
mutate(rate = n/sum(n)) %>%
ggplot(aes(period, rate)) +
facet_grid(sex~publisher) +
geom_line(aes(col=align), size=1) +
geom_point()
